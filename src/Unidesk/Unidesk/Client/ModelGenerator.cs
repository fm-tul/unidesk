using System.Reflection;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace Unidesk.Client;

public static class ModelGenerator
{
    
    // regex mathing GENERATED ON 2022-08-07 18:15:21
    private static readonly Regex _generatedOnRegex = new(@"GENERATED ON (\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})", RegexOptions.Multiline);
    
    public static IEnumerable<string> Generate(Type root, string outputDir)
    {
        // looking for GenerateModelAttribute
        var classes = root.Assembly
            .GetTypes()
            .Where(t => t.GetCustomAttributes(typeof(GenerateModelAttribute), false).Length > 0)
            .ToList();

        var options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        foreach (var cls in classes)
        {
            var attrs = cls.GetCustomAttributes(typeof(GenerateModelAttribute), false)
                .OfType<GenerateModelAttribute>()
                .ToList();

            foreach (var attr in attrs)
            {
                var output = new StringBuilder();
                output.AppendLine("/* THIS FILE IS AUTO-GENERATED BY Unidesk.Client.ModelGenerator */");
                output.AppendLine("/* DO NOT EDIT */");
                output.AppendLine($"/* GENERATED ON {DateTime.Now:yyyy-MM-dd HH:mm:ss} */");
                output.AppendLine();
                var name = attr.Name ?? attr.ForType.Name;
                var outputFile = Path.Combine(outputDir, $"{name}.ts");

                // look for public static fields or certain type
                var fields = cls.GetFields(BindingFlags.Static | BindingFlags.Public)
                    .Where(i => i.FieldType == attr.ForType)
                    .ToList();

                foreach (var field in fields)
                {
                    var value = field.GetValue(null);
                    
                    var multiLangAttributes = field
                        .GetCustomAttributes<MultiLangAttribute>()
                        .ToList();
                    
                    if (multiLangAttributes.Any())
                    {
                        var multiLangDict = multiLangAttributes.Combine();
                        multiLangDict["value"] = value!;
                        var str = JsonSerializer.Serialize(multiLangDict, options);
                        output.AppendLine($"export const {field.Name} = {str};");
                    }
                    else
                    {
                        var str = JsonSerializer.Serialize(value, options);
                        output.AppendLine($"export const {field.Name} = {str};");
                    }
                }

                if (attr.GenerateAggreation)
                {
                    output.AppendLine();
                    output.AppendLine($"export const All = [");
                    foreach (var field in fields)
                    {
                        output.AppendLine($"    {field.Name},");
                    }

                    output.AppendLine($"];");
                }

                if (File.Exists(outputFile))
                {
                    var existing = File.ReadAllText(outputFile);
                    var existingCleared = _generatedOnRegex.Replace(existing, string.Empty);
                    var outputCleared = _generatedOnRegex.Replace(output.ToString(), string.Empty);
                    if (existingCleared == outputCleared)
                    {
                        Console.WriteLine($"{outputFile} is up to date");
                        continue;
                    }
                }

                Directory.CreateDirectory(outputDir);
                var result = output.ToString();
                File.WriteAllText(outputFile, result);
                yield return result;
            }
        }
    }
}

public static class ModelGeneratorExtensions
{
    public static void GenerateModels<T>(this IApplicationBuilder app, string output)
    {
        ModelGenerator.Generate(typeof(T), output).ToList();
    }
}