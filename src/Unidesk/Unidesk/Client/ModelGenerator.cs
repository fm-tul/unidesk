using System.Reflection;
using System.Text;
using System.Text.Json;

namespace Unidesk.Client;

public class ModelGenerator
{
    public static void Generate(Type root, string outputDir)
    {
        // looking for GenerateModelAttribute
        var classes = root.Assembly
            .GetTypes()
            .Where(t => t.GetCustomAttributes(typeof(GenerateModelAttribute), false).Length > 0)
            .ToList();

        var options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        foreach (var cls in classes)
        {
            var attrs = cls.GetCustomAttributes(typeof(GenerateModelAttribute), false)
                .OfType<GenerateModelAttribute>()
                .ToList();
            
            foreach (var attr in attrs)
            {
                var output = new StringBuilder();
                output.AppendLine("/* THIS FILE IS AUTO-GENERATED BY Unidesk.Client.ModelGenerator */");
                output.AppendLine("/* DO NOT EDIT */");
                output.AppendLine($"/* GENERATED ON {DateTime.Now:yyyy-MM-dd HH:mm:ss} */");
                output.AppendLine();
                var outputFile = Path.Combine(outputDir, $"{attr.Name}_{attr.ForType.Name}s.ts");
                
                // look for public static fields or certain type
                var fields = cls.GetFields(BindingFlags.Static | BindingFlags.Public)
                    .Where(i => i.FieldType == attr.ForType)
                    .ToList();
                
                foreach (var field in fields)
                {
                    var value = field.GetValue(null);
                    var str = JsonSerializer.Serialize(value, options);
                    output.AppendLine($"export const {field.Name} = {str};");
                }

                if (attr.GenerateAggreation)
                {
                    output.AppendLine();
                    output.AppendLine($"export const All = [");
                    foreach (var field in fields)
                    {
                        output.AppendLine($"    {field.Name},");
                    }
                    output.AppendLine($"];");
                }
                
                File.WriteAllText(outputFile, output.ToString());
            }
        }

    }
}

public static class ModelGeneratorExtensions
{
    public static void GenerateModels<T>(this IApplicationBuilder app, string output)
    {
        ModelGenerator.Generate(typeof(T), output);
    }
}